---
title: "BayesSpace analysis of SCC dataset (Ji et al., 2020)"
author: "Edward Zhao, Matt Stone, Xing Ren, and Raphael Gottardo"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{BayesSpace - SCC}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---
  
```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  out.width="100%",
  fig.width=7, fig.height=5,
  dpi=300, fig.path="figures/ji_SCC-",
  message=FALSE, warning=FALSE, error=FALSE
)
```

```{r setup}
library(BayesSpace)
library(ggplot2)
library(patchwork)
```

## Overview

Here we present our re-analysis of one of the squamous cell carcinoma (SCC)
samples originally reported by [Ji et al.
(2020)](https://www.sciencedirect.com/science/article/pii/S0092867420306723?via%3Dihub).
These data were obtained from GEO ([accession
GSE144239](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE144239)); we
re-analyze the sample from patient 4, which had greater sequencing depth than
the sample from patient 6.

## Processing the data

A cleaned `SingleCellExperiment` object containing the dataset is available through BayesSpace (details on data cleaning are available on [Github](https://github.com/msto/spatial-datasets/blob/master/snakefiles/2020_ji_squamous-cell-carcinoma.snake)). We
preprocessed the data by performing PCA on the top 2,000 HVGs.

```{r preprocess}
scc <- getRDS("2020_ji_squamous-cell-carcinoma", "P4_rep1")

set.seed(101)
dec <- scran::modelGeneVar(scc)
top <- scran::getTopHVGs(dec, n = 2000)

set.seed(102)
scc <- scater::runPCA(scc, subset_row=top)

## Add BayesSpace metadata
scc <- spatialPreprocess(scc, platform="Visium", skip.PCA=TRUE)
```

## Clustering with BayesSpace

Unlike our analyses of the melanoma (Thrane et al. 2018) and dorsolateral
prefrontal cortex (Maynard, Collado-Torres, et al. 2020) samples, this sample
did not have a strong biological prior for the expected number of clusters.
After evaluating the average model pseudo-log-likelihood over the first 1000
iterations (excluding a 100-iteration burn-in), we selected `q=12` as a
reasonable elbow and choice of number of clusters.

```{r qTune}
scc <- qTune(scc, qs=seq(2, 20))
qPlot(scc)
```

We clustered the first 15 principal components, specifying 12 clusters as
described above, and ran the MCMC algorithm for 10,000 iterations. We set our
smoothing parameter `gamma` to 3, which we generally suggest for Visium
datasets. We also computed an enhanced resolution clustering using the same
parameters and 200,000 iterations.

```{r spatialCluster}
q <- 12  # Number of clusters
d <- 15  # Number of PCs

## Here we run mclust externally so the random seeding is consistent with 
## original analyses
library(mclust)
Y <- reducedDim(scc, "PCA")[, seq_len(d)]
set.seed(101)
init <- Mclust(Y, q, "EEE", verbose=FALSE)$classification

## Run BayesSpace clustering
set.seed(100)
scc <- spatialCluster(scc, q=q, d=d, platform='Visium', init=init,
                      nrep=10000, gamma=3)
```

```{r spatialEnhance}
## Run BayesSpace enhanced clustering
set.seed(100)
scc.enhanced <- spatialEnhance(scc, q=q, d=d, platform="Visium",
                               nrep=200000, gamma=3, verbose=TRUE,
                               jitter_scale=5.5, jitter_prior=0.3,
                               save.chain=TRUE)
```

```{r}
saveRDS(scc, "scc.rds")
```

```{r}
saveRDS(scc.enhanced, "scc.enhanced.rds")
```

```{r}
scc.enhanced <- readRDS("scc.enhanced.rds")
```


We compared the two clusterings using `clusterPlot()`.

```{r clustering, fig.width=6, fig.height=3}
palette <- RColorBrewer::brewer.pal(q, "Paired")

spot.plot <- clusterPlot(scc, palette=palette, size=0.05) +
  labs(title="Spot-level clustering") +
  guides(fill=FALSE)

enhanced.plot <- clusterPlot(scc.enhanced, palette=palette, size=0.05) +
  labs(title="Enhanced clustering")

spot.plot + enhanced.plot

ggsave("scc_clustering.pdf")
```

## Enhancing feature expression

Next we examined the expression of cell-type-specific marker genes reported by
Ji et al. at the spot level and after enhancement.

```{r enhance.markers}
markers <- list()
markers[["Basal keratinocyte"]] <- c("KRT5", "KRT14")
markers[["Suprabasal keratinocyte"]] <- c("KRT1", "KRT10")
markers[["Myeloid"]] <- c("LYZ")
markers[["T-cell"]] <- c("CD2", "CD3D", "CD3E", "CD3G", "CD7")
markers[["Melanocyte"]] <- c("MLANA", "DCT", "PMEL")
markers[["Endothelial"]] <- c("TFF3", "CLDN5", "VWF")

scc.enhanced <- enhanceFeatures(scc.enhanced, scc, model="xgboost",
                                feature_names=purrr::reduce(markers, c))
```

We aggregated the expression of marker genes within each cell type by summing
their log-normalized expression.

```{r aggregate.markers}
sum_counts <- function(sce, features) {
  if (length(features) > 1) {
    colSums(logcounts(sce)[features, ])
  } else {
    logcounts(sce)[features, ]
  }
}

spot_expr <- purrr::map(markers, function(xs) sum_counts(scc, xs))
enhanced_expr <- purrr::map(markers, function(xs) sum_counts(scc.enhanced, xs))
```

And we plotted the spatial expression of each cell type's markers using
`featurePlot()`, at the spot-level:

```{r spot.expression, fig.width=14, fig.height=8}
plot_expression <- function(sce, expr, name) {
  featurePlot(sce, expr, color=NA) +
    viridis::scale_fill_viridis(option="A") +
    labs(title=name, fill="Log-normalized\nexpression")
}

spot_plots <- purrr::imap(spot_expr, function(x, y) plot_expression(scc, x, y))
patchwork::wrap_plots(spot_plots, ncol=3)
```

And at enhanced subspot resolution:

```{r enhanced.expression, fig.width=14, fig.height=8}
enhanced_plots <- purrr::imap(enhanced_expr, function(x, y) plot_expression(scc.enhanced, x, y))
patchwork::wrap_plots(enhanced_plots, ncol=3)
```

## Differential expression analysis

Finally, we performed a differential expression analysis between clusters of
interest. First, we imputed the expression of all genes, not only the markers,
at enhanced resolution.

```{r enhanceFeatures}
scc.enhanced <- enhanceFeatures(scc.enhanced, scc, model="xgboost")
```

Next, we applied a standard Seurat differential expression analysis workflow to
the enhanced resolution.

```{r seurat.DE}
library(dplyr)
seurat_cluster_DE <- function(sce, clusters=NULL, n_markers=6) {
  ## Convert SCE to seurat object and use BayesSpace cluster as identifier
  seurat <- Seurat::CreateSeuratObject(counts=logcounts(sce),
                                       assay='Spatial',
                                       meta.data=as.data.frame(colData(sce)))
  seurat <- Seurat::SetIdent(seurat, value = "spatial.cluster")
  
  ## Subset to specified clusters
  if (!is.null(clusters)) {
    seurat <- subset(seurat, spatial.cluster %in% clusters)
    palette <- palette[clusters]
  }
  
  ## Scale data
  seurat@assays$Spatial@scale.data <-
    seurat@assays$Spatial@data %>% as.matrix %>% t %>% scale %>% t
  
  ## Select top n markers from each cluster (by log fold change)
  top_markers <- Seurat::FindAllMarkers(seurat, assay='Spatial', slot='data',
                                        group.by='spatial.cluster',
                                        logfc.threshold=1, only.pos=T) %>% 
    group_by(cluster) %>% 
    top_n(n_markers, avg_logFC)
  
  ## Plot expression of markers
  Seurat::DoHeatmap(seurat, features = top_markers$gene, slot='scale.data',
                    group.by = "spatial.cluster", group.colors=palette, 
                    angle=0, size=4, label = F) + 
    guides(col = F)
}
```

We highlight the different expression between clusters 4 and 8, which both
demonstrate enriched immune cell expression but display substantial differences
in expression of immunoglobulin genes and genes regulated by interferons.

```{r DE.myeloid, fig.width=7, fig.height=5, message=FALSE, warning=FALSE}
seurat_cluster_DE(scc.enhanced, c(4, 8))
```

We additionally highlight the heterogeneity within the tumor revealed by
differential expression of the tumor clusters.

```{r DE.tumor, fig.width=7, fig.height=5, message=FALSE, warning=FALSE}
seurat_cluster_DE(scc.enhanced, c(2, 3, 6))
```
