---
title: "BayesSpace analysis of SCC dataset (Ji et al., 2020)"
author: "Edward Zhao, Matt Stone, Xing Ren, and Raphael Gottardo"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{BayesSpace - SCC}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---
  
```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  out.width="100%",
  fig.width=7, fig.height=5,
  dpi=300, fig.path="figures/ji_SCC-",
  message=FALSE, warning=FALSE, error=FALSE
)
```

```{r setup}
library(BayesSpace)
library(ggplot2)
library(patchwork)
```

## Overview

Here we present our re-analysis of one of the squamous cell carcinoma (SCC)
samples originally reported by [Ji et al.
(2020)](https://www.sciencedirect.com/science/article/pii/S0092867420306723?via%3Dihub).
These data were obtained from GEO ([accession
GSE144239](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE144239)); we
re-analyze the sample from patient 4, which had greater sequencing depth than
the sample from patient 6.

## Processing the data

A cleaned `SingleCellExperiment` object containing the dataset is available through BayesSpace (details on data cleaning are available on [Github](https://github.com/msto/spatial-datasets/blob/master/snakefiles/2020_ji_squamous-cell-carcinoma.snake)). We
preprocessed the data by performing PCA on the top 2,000 HVGs.

```{r preprocess}
scc <- getRDS("2020_ji_squamous-cell-carcinoma", "P4_rep1")

set.seed(101)
dec <- scran::modelGeneVar(scc)
top <- scran::getTopHVGs(dec, n = 2000)

set.seed(102)
scc <- scater::runPCA(scc, subset_row=top, ncomponents=15)

## Add BayesSpace metadata
scc <- spatialPreprocess(scc, platform="Visium", skip.PCA=TRUE)
```

## Clustering with BayesSpace

Unlike our analyses of the melanoma (Thrane et al. 2018) and dorsolateral
prefrontal cortex (Maynard, Collado-Torres, et al. 2020) samples, this sample
did not have a strong biological prior for the expected number of clusters.
After evaluating the average model pseudo-log-likelihood over the first 1000
iterations (excluding a 100-iteration burn-in), we selected `q=12` as a
reasonable elbow and choice of number of clusters.

```{r}
scc <- qTune(scc, qs=seq(2, 20))
qPlot(scc)
```

We clustered the first 15 principal components, specifying 12 clusters as described above, and ran the MCMC algorithm
for 10,000 iterations. We set our smoothing parameter `gamma` to 3, which we generally suggest for Visium datasets.

```{r spatialCluster, fig.width=5, fig.height=3}
q <- 12  # Number of clusters
d <- 15  # Number of PCs

## Run BayesSpace clustering
set.seed(101)
scc <- spatialCluster(scc, q=q, d=d, platform='Visium',
                      nrep=1000, gamma=3)
```


## Enhancing resolution with BayesSpace

```{r}
set.seed(100)
scc.enhanced <- spatialEnhance(scc, q=q, d=d, platform="Visium",
                               nrep=10000, gamma=3, verbose=TRUE,
                               jitter_scale=5.5, jitter_prior=0.3)
```

```{r fig.width=7, fig.height=3.5}
palette <- RColorBrewer::brewer.pal(q, "Paired")

spot.plot <- clusterPlot(scc, palette=palette, size=0.05) +
  labs(title="Spot-level clustering") +
  guides(fill=FALSE)

enhanced.plot <- clusterPlot(scc.enhanced, palette=palette, size=0.05) +
  labs(title="Enhanced clustering")

spot.plot + enhanced.plot
```

## Enhancing feature expression

```{r spatialCluster.normal}
markers <- list()
markers[["Basal keratinocyte"]] <- c("KRT5", "KRT14")
markers[["Suprabasal keratinocyte"]] <- c("KRT1", "KRT10")
markers[["Myeloid"]] <- c("LYZ")
markers[["T-cell"]] <- c("CD2", "CD3D", "CD3E", "CD3G", "CD7")
markers[["Melanocyte"]] <- c("MLANA", "DCT", "PMEL")
markers[["Endothelial"]] <- c("TFF3", "CLDN5", "VWF")

scc.enhanced <- enhanceFeatures(scc.enhanced, scc, model="xgboost",
                                feature_names=purrr::reduce(markers, c))
```

```{r}
sum_counts <- function(sce, features) {
  if (length(features) > 1) {
    colSums(logcounts(sce)[features, ])
  } else {
    logcounts(sce)[features, ]
  }
}

spot_expr <- purrr::map(markers, function(xs) sum_counts(scc, xs))
enhanced_expr <- purrr::map(markers, function(xs) sum_counts(scc.enhanced, xs))
```

```{r}
spot_plots <- purrr::imap(spot_expr, function(x, y) featurePlot(scc, x, high="#a83c09") + guides(fill=FALSE))

plot_expression <- function(sce, expr, name) {
  featurePlot(sce, expr) +
    scale_fill_viridis(option="A") +
    guides(fill=FALSE) +
    labs(title=name)
}
enhanced_plots <- purrr::imap(enhanced_expr, function(x, y) featurePlot(scc.enhanced, x, high="#a83c09") + scale_fill_viridis(option = "A")++ guides(fill=FALSE) +labs(title=y))
```

```{r}
patchwork::wrap_plots(enhanced_plots, ncol=3)
```



